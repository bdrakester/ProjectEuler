/**
 * The Project Euler Class
 */

public class ProjectEuler {

  /**
   * @param args the command line arguments
   */
  public static void main(String[] args) {
    System.out.println("Welcome to Project Euler...\n");

    int solution1 = Problem1();
    System.out.println("The Solution to Problem 1 = " + solution1);

    int solution2 = Problem2();
    System.out.println("The Solution to Problem 2 = " + solution2);

    long solution3 = Problem3();
    System.out.println("The Solution to Problem 3 = " + solution3);
  }
  
  /**
   * If we list all the natural numbers below 10 that are multiples of 3 or 5, 
   * we get 3, 5, 6 and 9. The sum of these multiples is 23.
   
   * Find the sum of all the multiples of 3 or 5 below 1000.
   */
  public static int Problem1() {
    int sum = 0;
    
    for(int i = 1; i < 1000; i++){
      if( ( (i % 3) == 0 ) || ( (i % 5) == 0 ) ){
        sum += i;
      }
    }
    return sum;
  }
  
  /** 
   * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting 
   * with 1 and 2, the first 10 terms will be:
   * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   *
   * By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
   * find the sum of the even-valued terms.
   */
  public static int Problem2(){
    int sum = 0;
    int previousTerm = 1, currentTerm = 2;
    int nextTerm;
    
    System.out.print("Fibonaccia sequence: ");
    // While terms do not exceed four million
    while (currentTerm <= 4000000){
      System.out.print(currentTerm + " ");
      
      // If term is even, add to sum
      if (currentTerm % 2 == 0){
        sum += currentTerm;
      }

      nextTerm = previousTerm + currentTerm;
      previousTerm = currentTerm;
      currentTerm = nextTerm;
    }

    System.out.println();

    return sum;
  }

  /**
   * The prime factors of 13195 are 5, 7, 13 and 29.
   * 
   * What is the largest prime factor of the number 600,851,475,143 ?
   */
  public static long Problem3(){
    //long solution = 1L;
    
    long number = 600851475143L;
    System.out.print("Solving Problem 3 ");
    /* Start from highest possible number and work backwards. */
    for(long i = number - 1; i > (number / 2); i--){
      if ((number % i) == 0){
        System.out.print(".");
        if (isPrime(number))
          return number;
      }
    }
    return -1L;
   }

  /**
   * @param number 
   * @return true if number is prime.
   */
  private static boolean isPrime(long number){
    long i = 2;

    while( i < (number / 2) ){
      if ((number % i) == 0){
        return false;
      }
    }
    
    return true;
   }

}
