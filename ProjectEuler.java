/**
 * The Project Euler Class
 */

import java.util.Scanner;
import java.util.ArrayList;
import java.util.Collections;

public class ProjectEuler {

  /**
   * @param args the command line arguments
   */
  public static void main(String[] args) {
    int solutionInt;
    long solutionLong;
    System.out.println("Welcome to Project Euler...\n");

    Scanner keyboard = new Scanner(System.in);
    System.out.print("Problem number?  ");

    int problemNumber = keyboard.nextInt();
    switch(problemNumber){
      case 1:
        solutionInt = Problem1();
        System.out.println("The Solution to Problem 1 = " + solutionInt);
        break;
      case 2:
        solutionInt = Problem2();
        System.out.println("The Solution to Problem 2 = " + solutionInt);
        break;
      case 3:
        solutionLong = Problem3();
        System.out.println("The Solution to Problem 3 = " + solutionLong);
        break;
      case 4:
        solutionInt = Problem4();
        System.out.println("The Solution to Problem 4 = " + solutionInt);
        break;
      default:
        System.out.println("Problem not solved yet :(");
    }
}

  /**
   * If we list all the natural numbers below 10 that are multiples of 3 or 5,
   * we get 3, 5, 6 and 9. The sum of these multiples is 23.

   * Find the sum of all the multiples of 3 or 5 below 1000.
   */
  public static int Problem1() {
    int sum = 0;

    for(int i = 1; i < 1000; i++){
      if( ( (i % 3) == 0 ) || ( (i % 5) == 0 ) ){
        sum += i;
      }
    }
    return sum;
  }

  /**
   * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting
   * with 1 and 2, the first 10 terms will be:
   * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
   *
   * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
   * find the sum of the even-valued terms.
   */
  public static int Problem2(){
    int sum = 0;
    int previousTerm = 1, currentTerm = 2;
    int nextTerm;

    System.out.print("Fibonaccia sequence: ");
    // While terms do not exceed four million
    while (currentTerm <= 4000000){
      System.out.print(currentTerm + " ");

      // If term is even, add to sum
      if (currentTerm % 2 == 0){
        sum += currentTerm;
      }

      nextTerm = previousTerm + currentTerm;
      previousTerm = currentTerm;
      currentTerm = nextTerm;
    }

    System.out.println();

    return sum;
  }

  /**
   * The prime factors of 13195 are 5, 7, 13 and 29.
   *
   * What is the largest prime factor of the number 600,851,475,143 ?
   */
  public static long Problem3(){
    long number = 600851475143L;

    /* Find the Factors */
    ArrayList<Long> factors = new ArrayList<Long>();

    System.out.println("Factors of " + number + " : ");
    System.out.print("Adding to list ...");

    for(long i = 2; i < number; i++ ){
      if (number % i == 0){
        if (factors.contains(i)){
          System.out.println("break at " + i);
          break;
        }
        System.out.print(i + "-" + number / i + " ");
        factors.add(i);
        factors.add(number/i);
      }
    }


    System.out.print("\nfactors (ArrayList) = ");
    for (long l : factors){
      System.out.print(l + " ");
    }

    // Sort the list from highest to lowest
    Collections.sort(factors, Collections.reverseOrder());


    System.out.print("\nfactors (ArrayList) sorted = ");
    for (long l : factors){
      System.out.print(l + " ");
    }

    System.out.println("\nFinding highest prime...");
    for (long l : factors){
      System.out.println("Testing " + l);
      if (isPrime(l))
        return l;
    }

    return -1L;
   }

  /**
   * @param number
   * @return true if number is prime.
   */
  private static boolean isPrime(long number){
    long i = 2;
    long half = number / 2;
    while( i < half ){
      if ((number % i) == 0 ){
        return false;
      }
      i++;
    }

    return true;
   }



  /** 
   * A palindromic number reads the same both ways. The largest palindrome made from the product 
   * of two 2-digit numbers is 9009 = 91 Ã— 99.
   *
   * Find the largest palindrome made from the product of two 3-digit numbers.
   */
  public static int Problem4() {
    int largestPalindrome = 0;
    int product;

    for (int number1 = 100; number1 < 1000; number1++){
      for (int number2 = 100; number2 < 1000; number2++){
        product = number1 * number2;
        if( isPalindrome(product) && product > largestPalindrome){
          largestPalindrome = product;
        }
      }
    }    
    
    return largestPalindrome;
  }

  /**
   * Checks if a number is a palindrome, that is a number that reads the same both ways.
   * 
   * @param number the number to check.
   * @return True is number is a palindrome.
   */
  private static boolean isPalindrome(int number){
    String numberStr = Integer.toString(number);
    String reversedStr = "";

    int len = numberStr.length();
    for (int i = len -1; i >= 0; i--){
      reversedStr = reversedStr + numberStr.charAt(i);
    }
    
    if (reversedStr.equals(numberStr)){
      return true;
    }
    
    return false;
    
  }


}